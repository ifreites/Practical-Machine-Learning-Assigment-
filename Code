
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(e1071)
library(randomForest)
set.seed(1)

train.url <-
  "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test.url <- 
  "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"

path <- paste(getwd(),"/", "machine", sep="")
train.file <- file.path(path, "machine-train-data.csv")
test.file <- file.path(path, "machine-test-data.csv")


# read the data
train.file <- read.csv("C:/Users/Isaac/Desktop/pml-training.csv",na.strings=c("NA","","#DIV/0!"))
test.file <- read.csv("C:/Users/Isaac/Desktop/pml-testing.csv",na.strings=c("NA","","#DIV/0!"))


train.data.raw <- read.csv(train.file, na.strings=c("NA","#DIV/0!",""))
test.data.raw <- read.csv(test.file, na.strings=c("NA","#DIV/0!",""))



# Drop the first 7 columns as they're unnecessary for predicting.
train.data.clean1 <- train.file[,8:length(colnames(train.file))]
test.data.clean1 <- test.file[,8:length(colnames(test.file))]
# Drop colums with NAs
train.data.clean1 <- train.data.clean1[, colSums(is.na(train.data.clean1)) == 0] 
test.data.clean1 <- test.data.clean1[, colSums(is.na(test.data.clean1)) == 0] 


# Check for near zero variance predictors and drop them if necessary
nzv <- nearZeroVar(train.data.clean1,saveMetrics=TRUE)
zero.var.ind <- sum(nzv$nzv)

if ((zero.var.ind>0)) {
  train.data.clean1 <- train.data.clean1[,nzv$nzv==FALSE]
}


# Slice the data for cross validation
# The training data is divided into two sets. This first is a training set with 70% of the data which is used to train the model. The second is a validation set used to assess model performance.

in.training <- createDataPartition(train.data.clean1$classe, p=0.70, list=F)

train.data.final <- train.data.clean1[in.training, ]

validate.data.final <- train.data.clean1[-in.training, ]

# Model Development

control.parms <- trainControl(method="cv", 5)

rf.model <- train(classe ~ ., data=train.data.final, method="rf",
                  trControl=control.parms, ntree=251)


rf.model
